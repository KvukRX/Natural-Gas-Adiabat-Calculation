//Кузьмин Матвей Григорьевич
//КТ-22-04
//Вариант 67


#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
int main()
{
    double Phis[8] = {20,22,0,0,0,1,8.3144621,0};
    Phis[2] = Phis[1] + 273;
    Phis[3] = Phis[2]/Phis[5];
    Phis[7] = pow(Phis[3],-1);

    double Kij[10][11] = {
        {1, 1, 1.007619, 0.997596, 1, 1.002529, 1, 0.982962, 1.00363, 0.995933, 1},
        {1, 1, 0.986893, 1, 1, 1, 1, 1, 1.00796, 1.00851, 1},
        {1.007619, 0.986893, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {0.997596, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1.002529, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {0.982962, 1, 1, 1, 1, 1, 1, 1, 1, 0.910183, 1},
        {1.00363, 1.00796, 1, 1, 1, 1, 1, 1, 1, 0.982361, 0.982361},
        {0.995933, 1.00851, 1, 1, 1, 1, 1, 0.910183, 0.982361, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 0.982361, 1, 1}
    };
    double Gij[10][10] = {
        {1, 1, 1, 1, 1, 1, 1, 1, 0.807653, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 0.370296, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 0.982746, 1},
        {0.807653, 0.370296, 1, 1, 1, 1, 1, 0.982746, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
    };
    double Eij[10][10] = {
        {1, 1, 0.994635, 0.989844, 1.01953, 0.999268, 1.107274, 0.97164, 0.960644, 1},
        {1, 1, 1.02256, 1.01306, 1, 1.00532, 1, 0.97012, 0.925053, 1},
        {0.994635, 1.02256, 1, 1.0049, 1, 1, 1, 0.945939, 0.960237, 1},
        {0.989844, 1.01306, 1.0049, 1, 1, 1, 1, 0.973384, 0.897362, 1},
        {1.01953, 1, 1, 1, 1, 1, 1, 0.946914, 0.906849, 1},
        {0.999268, 1.00532, 1, 1, 1, 1, 1, 0.94552, 0.859764, 1},
        {1.107274, 1, 1, 1, 1, 1, 1, 1, 0.855134, 1},
        {0.97164, 0.97012, 0.945939, 0.973384, 0.946914, 0.94552, 1, 1, 1.02274, 1},
        {0.960644, 0.925053, 0.960237, 0.897362, 0.906849, 0.859764, 0.855134, 1.02274, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
    };
    double Vij[10][10] = {
        {1.0, 1.0, 0.990877, 0.992291, 1.0, 1.00367, 1.302576, 0.886106, 0.963827, 1.0},
        {1.0, 1.0, 1.065173, 1.25, 1.25, 1.25, 1.0, 0.816431, 0.96987, 1.0},
        {0.990877, 1.065173, 1.0, 1.0, 1.0, 1.0, 1.0, 0.915502, 1.0, 1.0},
        {0.992291, 1.25, 1.0, 1.0, 1.0, 1.0, 1.0, 0.993556, 1.0, 1.0},
        {1.0, 1.25, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
        {1.00367, 1.25, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
        {1.302576, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.066638, 1.0},
        {0.886106, 0.816431, 0.915502, 0.993556, 1.0, 1.0, 1.0, 1.0, 0.835058, 1.0},
        {0.963827, 0.96987, 1.0, 1.0, 1.0, 1.0, 1.066638, 0.835058, 1.0, 1.0},
        {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}
    };
    double A4[10][9] = {
        {4.00088, 0.76315, 820.659, 0.0046, 178.41, 8.74432, 1062.82, -4.46921, 1090.53},
        {4.00263, 4.33939, 559.314, 1.23722, 223.284, 13.1974, 1031.38, -6.01989, 1071.29},
        {4.02939, 6.60569, 479.856, 3.197, 200.893, 19.1921, 955.312, -8.37267, 1027.29},
        {4.33944, 9.44893, 468.27, 6.89406, 183.636, 24.4618, 1914.1, 14.7824, 903.185},
        {4.06714, 8.97575, 438.27, 5.25156, 198.018, 25.1423, 1905.02, 16.1388, 893.765},
        {4.0, 8.95043, 178.67, 21.836, 840.538, 33.4032, 1774.25, 0.0, 0.0},
        {4.0, 11.6977, 182.326, 26.8142, 859.207, 38.6164, 1826.59, 0.0, 0.0},
        {3.50031, 0.13732, 662.738, -0.1466, 680.562, 0.90066, 1740.06, 0.0, 0.0},
        {3.50002, 2.04452, 919.306, -1.06044, 865.07, 2.03366, 483.553, 0.01393, 341.109},
        {2.50, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00}
    };
    double A3[100][10] = {
        {0.1538326, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {1.341953, 1, 0, 0, 0.5, 0, 0, 0, 0, 0},
        {-2.998583, 1, 0, 0, 1, 0, 0, 0, 0, 0},
        {-0.04831228, 1, 0, 0, 3.5, 0, 0, 0, 0, 0},
        {0.3757965, 1, 0, 0, -0.5, 1, 0, 0, 0, 0},
        {-1.589575, 1, 0, 0, 4.5, 1, 0, 0, 0, 0},
        {-0.05358847, 1, 0, 0, 0.5, 0, 1, 0, 0, 0},
        {0.88659463, 1, 0, 0, 7.5, 0, 0, 0, 1, 0},
        {-0.71023704, 1, 0, 0, 9.5, 0, 0, 0, 1, 0},
        {-1.471722, 1, 0, 0, 6, 0, 0, 0, 0, 1},
        {1.32185035, 1, 0, 0, 12, 0, 0, 0, 0, 1},
        {-0.78665925, 1, 0, 0, 12.5, 0, 0, 0, 0, 1},
        {2.29129E-09, 1, 1, 3, -6, 0, 0, 1, 0, 0},
        {0.1576724, 1, 1, 2, 2, 0, 0, 0, 0, 0},
        {-0.4363864, 1, 1, 2, 3, 0, 0, 0, 0, 0},
        {-0.04408159, 1, 1, 2, 2, 0, 1, 0, 0, 0},
        {-0.003433888, 1, 1, 4, 2, 0, 0, 0, 0, 0},
        {0.03205905, 1, 1, 4, 11, 0, 0, 0, 0, 0},
        {0.02487355, 2, 0, 0, -0.5, 0, 0, 0, 0, 0},
        {0.07332279, 2, 0, 0, 0.5, 0, 0, 0, 0, 0},
        {-0.001600573, 2, 1, 2, 0, 0, 0, 0, 0, 0},
        {0.6424706, 2, 1, 2, 4, 0, 0, 0, 0, 0},
        {-0.4162601, 2, 1, 2, 6, 0, 0, 0, 0, 0},
        {-0.06689957, 2, 1, 4, 21, 0, 0, 0, 0, 0},
        {0.2791795, 2, 1, 4, 23, 1, 0, 0, 0, 0},
        {-0.6966051, 2, 1, 4, 22, 0, 1, 0, 0, 0},
        {-0.002860589, 2, 1, 4, -1, 0, 0, 1, 0, 0},
        {-0.008098836, 3, 0, 0, -0.5, 0, 1, 0, 0, 0},
        {3.150547, 3, 1, 1, 7, 1, 0, 0, 0, 0},
        {0.007224479, 3, 1, 1, -1, 0, 0, 1, 0, 0},
        {-0.7057529, 3, 1, 2, 6, 0, 0, 0, 0, 0},
        {0.5349792, 3, 1, 2, 4, 1, 0, 0, 0, 0},
        {-0.07931491, 3, 1, 3, 1, 1, 0, 0, 0, 0},
        {-1.418465, 3, 1, 3, 9, 1, 0, 0, 0, 0},
        {-5.99905E-17, 3, 1, 4, -13, 0, 0, 1, 0, 0},
        {0.1058402, 3, 1, 4, 21, 0, 0, 0, 0, 0},
        {0.03431729, 3, 1, 4, 8, 0, 1, 0, 0, 0},
        {-0.007022847, 4, 0, 0, -0.5, 0, 0, 0, 0, 0},
        {0.02495587, 4, 0, 0, 0, 0, 0, 0, 0, 0},
        {0.04296818, 4, 1, 2, 2, 0, 0, 0, 0, 0},
        {0.7465453, 4, 1, 2, 7, 0, 0, 0, 0, 0},
        {-0.2919613, 4, 1, 2, 9, 0, 1, 0, 0, 0},
        {7.294616, 4, 1, 4, 22, 0, 0, 0, 0, 0},
        {-9.936757, 4, 1, 4, 23, 0, 0, 0, 0, 0},
        {-0.005399808, 5, 0, 0, 1, 0, 0, 0, 0, 0},
        {-0.2432567, 5, 1, 2, 9, 0, 0, 0, 0, 0},
        {0.04987016, 5, 1, 2, 3, 0, 1, 0, 0, 0},
        {0.003733797, 5, 1, 4, 8, 0, 0, 0, 0, 0},
        {1.874951, 5, 1, 4, 23, 0, 1, 0, 0, 0},
        {0.002168144, 6, 0, 0, 1.5, 0, 0, 0, 0, 0},
        {-0.6587164, 6, 1, 2, 5, 1, 0, 0, 0, 0},
        {0.000205518, 7, 0, 0, -0.5, 0, 1, 0, 0, 0},
        {0.009776195, 7, 1, 2, 4, 0, 0, 0, 0, 0},
        {-0.02048708, 8, 1, 1, 7, 1, 0, 0, 0, 0},
        {0.01557322, 8, 1, 2, 3, 0, 0, 0, 0, 0},
        {0.006862415, 8, 1, 2, 0, 1, 0, 0, 0, 0},
        {-0.001226752, 9, 1, 2, 1, 0, 0, 0, 0, 0},
        {0.002850908, 9, 1, 2, 0, 0, 1, 0, 0, 0}
    };
    double A1[10][10] = {
        {16.043, 0.9981, 151.3183, 0.4619255, 0, 0, 0, 0, 0, 0},
        {30.07, 0.992, 244.1667, 0.5279209, 0.0793, 0, 0, 0, 0, 0.0793},
        {44.097, 0.9834, 298.1183, 0.583749, 0.141239, 0, 0, 0, 0, 0.141239},
        {58.123, 0.9682, 337.6389, 0.6341423, 0.281835, 0, 0, 0, 0, 0.281835},
        {58.123, 0.971, 324.0689, 0.6406937, 0.256692, 0, 0, 0, 0, 0.256692},
        {72.15, 0.945, 370.6823, 0.6798307, 0.366911, 0, 0, 0, 0, 0.366911},
        {86.177, 0.919, 402.636293, 0.7175118, 0.289731, 0, 0, 0, 0, 0.289731},
        {28.0135, 0.9997, 99.73778, 0.4479153, 0.027815, 0, 0, 0, 0, 0.027815},
        {44.01, 0.9947, 241.9606, 0.4557489, 0.189065, 0.69, 0, 0, 0, 0.189065},
        {4.0026, 1.0005, 2.610111, 0.3589888, 0, 0, 0, 0, 0, 0}
    };
    double variant[10][6] = {
        {90.1309,0,0,0.4619255,0,0},
        {4.1372,0,0,0.5279209,0,0},
        {1.2985,0,0,0.584749,0,0},
        {0.4611,0,0,0.6341423,0,0},
        {0.3773,0,0,0.6406937,0,0},
        {0.0752,0,0,0.6798307,0,0},
        {0.0748,0,0,0.7175118,0,0},
        {2.9662,0,0,0.4479153,0,0},
        {0.4696,0,0,0.4557489,0,0},
        {0.0092,0,0,0.3589888,0,0}
    };
    for (int i = 0; i <= 9; i++){
        variant[i][1] = variant[i][0]/100;
        variant[i][2] = variant[i][1];
        variant[i][4] = variant[i][3];
        variant[i][5] = variant[i][1]*(pow(variant[i][3],2.5));
    }
    double Kx = 0;
    double part1 = 0;
    for (int i = 0; i < 10; i++){
        part1 = part1 + variant[i][5];
    }
    part1 = pow(part1,2);
    double part2 = 0;
    int i = 1;
    int ai = 1;
    for (int j = 0; j < 9; j++){
        for (i; i < 10; i++){
            part2 = part2 + (variant[j][1]*variant[i][2]*(pow(Kij[i][j],5)-1)*pow((variant[j][3]*variant[i][4]), 2.5));
        }
        i = ai+1;
        ai++;
    }
    part2 = part2*2;
    Kx = part1+part2;
    Kx = pow(Kx,0.2);
    double p0m = pow(10, -3)*pow(Kx, -3)*Phis[6]*Phis[5];
    Phis[4] = Phis[0]/p0m;

    double F = 0;
    for(int i = 0; i < 10; i++){
        F = F + (pow(variant[i][1],2)*A1[i][6]);
    }

    double Q = 0;
    for(int i = 0; i < 10; i++){
        Q = Q + (variant[i][1]*A1[i][5]);
    }

    double G = 0;
    double G1 = 0;
    double G2 = 0;
    for(int i = 0; i < 10; i++){
        G1 = G1 + (variant[i][1]*A1[i][4]);
    }

    i = 1;
    ai = 1;
    for (int j = 0; j < 9; j++){
        for (i; i < 10; i++){
            G2 = G2 + (variant[j][1]*variant[i][2]*(Gij[i][j]-1)*(A1[j][4]+A1[i][9]));
        }
        i = ai+1;
        ai++;
    }
    G = G1+G2;
    
    double V = 0;
    double V1 = 0;
    double V2 = 0;
    for (int i = 0; i < 10; i++){
        V1 = V1 + (variant[i][1]*pow(A1[i][2],2.5));
    }
    V1 = pow(V1,2);
    i = 1;
    ai = 1;
    for (int j = 0; j < 9; j++){
        for (i; i < 10; i++){
            V2 = V2 + (variant[j][1]*variant[i][2]*(pow(Vij[i][j],5)-1)*pow((A1[j][3]*A1[i][3]), 2.5));
        }
        i = ai+1;
        ai++;
    }
    V2 = V2*2;
    V = pow(V1+V2,0.2);


    double Cn[58];
    for(int i = 0; i < 58; i++){
        Cn[i] = pow((G+1-A3[i][5]),A3[i][5])*pow((pow(Q,2)+1-A3[i][6]),A3[i][6])*pow((F+1-A3[i][7]),A3[i][7])*pow(V,A3[i][4]);
    }
    
    double Eij2[100];
    int count = 0;
    for (int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            Eij2[count] = Eij[j][i]*sqrt(A1[i][2]*A1[j][2]);
            count++;
        }
    }
    double Gij2[100];
    count = 0;
    for (int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            Gij2[count] = (Gij[j][i]*(A1[i][4]+A1[j][4]))/2;
            count++;
        }
    }
    double Bnij[100][58];
    count = 0;
    int it=0;
    int jt=0;
    for (int n = 0; n < 58; n++){
        for (int j = 0; j < 100; j++){
            if(jt == 9){
                jt = 0;
                it++;
            }
            if(it == 9){
                it = 0;
            }
            Bnij[j][n] = pow((Gij2[count]+1-A3[n][5]),A3[n][5])*pow((A1[it][5]*A1[jt][5]+1-A3[n][6]),A3[n][6])*pow((sqrt(A1[it][6]*A1[jt][6])+1-A3[n][7]),A3[n][7])*pow((A1[it][7]*A1[jt][7]+1-A3[n][8]),A3[n][8])*pow((A1[it][8]*A1[jt][8]+1-A3[n][9]),A3[n][9]);
            jt++;
            count++;
        }
    }

    double BnC[100][58];
    jt = 0;
    it = 0;
    count = 0;
    for (int n = 0; n < 58; n++){
        for (int j = 0; j < 100; j++){
            if(jt == 9){
                jt = 0;
                it++;
            }
            if(it == 9){
                it = 0;
            }
            if (Eij2[count] == 0){
                BnC[j][n] = 0;
            }
            else{
                BnC[j][n] = variant[it][1]*variant[jt][2]*Bnij[j][n]*pow(Eij2[count],A3[n][4])*pow(variant[it][3]*variant[jt][4],3/2);
                //cout << pow(abs(Eij2[count]),A3[n][4]) <<" "<< Eij2[count] << " " << A3[n][4] << endl;
            }
            jt++;
            count++;
        }
    }
    double Bn[58];
    count = 0;
    for (int n = 0; n < 58; n++){
        for (int j = 0; j < 100; j++){
            Bn[count] = Bn[count] + BnC[j][n];
        }
        count++;
    }


    double Dn[58];
    double Un[58];

    for(int i = 0; i < 12; i++){
        Dn[i] = Bn[i]*pow(Kx,-3);
        Un[i] = 0;
    }
    for(int i = 12; i < 18; i++){
        Dn[i] = Bn[i]*pow(Kx,-3)-Cn[i];
        Un[i] = Cn[i];
    }
    for(int i = 18; i < 58; i++){
        Dn[i] = 0;
        Un[i] = Cn[i];
    }
    for(int i = 0; i < 58; i++){
        if( Dn[i] != Dn[i]){
            Dn[i] = 0;
        }
        if (Un[i] != Un[i]){
            Un[i] = 0;
        }
    }

    double delt[6];
    delt[0] = ((pow(10, 3)*Phis[0]*pow(Kx, 3))/(Phis[2]*Phis[6]));

    double A0[6][4];
    double A0C[58][24];
    double PiC[5];

    for(it = 0; it < 5; it++){
        for (int n = 0; n < 58; n++){
            A0C[n][it] = A3[n][0]*pow(delt[it],A3[n][1])*pow(Phis[3],-(A3[n][4]))*(A3[n][1]*Dn[n]+(A3[n][1]-A3[n][2]*A3[n][3]*pow(delt[it],A3[n][3]))*Un[n]*exp(-A3[n][2]*pow(delt[it],A3[n][3])));
        
            //cout << A3[n][0]*pow(delt[it],A3[n][1])*pow(Phis[3],-(A3[n][4]))*(A3[n][1]*Dn[n]+(A3[n][1]-A3[n][2]*A3[n][3]*pow(delt[it],A3[n][3]))*Un[n]*exp(-A3[n][2]*pow(delt[it],A3[n][3]))) << endl;
        }

        for (int n = 0; n < 58; n++){
            A0C[n][it] = A3[n][0]*pow(delt[it],A3[n][1])*pow(Phis[3],-(A3[n][4]))*((A3[n][1]+1)*A3[n][1]*Dn[n]+((A3[n][1]-A3[n][2]*A3[n][3]*pow(delt[it],A3[n][3]))*(A3[n][1]-A3[n][2]*A3[n][3]*pow(delt[it],A3[n][3])+1)-A3[n][2]*pow(A3[n][3],2)*pow(delt[it],A3[n][3])*Un[n]*exp(-A3[n][2]*pow(delt[it],A3[n][3]))));
            
        }

        for (int n = 0; n < 58; n++){
            A0C[n][it] = A3[n][0]*pow(delt[it],A3[n][1])*pow(Phis[3],-(A3[n][4]))*(1-A3[n][4])*(A3[n][1]*Dn[n]+(A3[n][1]-A3[n][2]*A3[n][3]*pow(delt[it],A3[n][3]))*Un[n]*exp(-A3[n][2]*pow(delt[it],A3[n][3])));
        }

        for (int n = 0; n < 58; n++){
            A0C[n][it] = A3[n][0]*pow(delt[it],A3[n][1])*pow(Phis[3],-(A3[n][4]))*A3[n][4]*(1-A3[n][4])*(Dn[n]+Un[n]*exp(-A3[n][2]*pow(delt[it],A3[n][3])));
            
        }
        for(int i = 0; i < 58; i++){
            A0[it][0] = A0[it][0] + A0C[i][it];
            A0[it][1] = A0[it][1] + A0C[i][it];
            A0[it][2] = A0[it][2] + A0C[i][it];
            A0[it][3] = A0[it][3] + A0C[i][it];
        }
        double detDelt[5];
        detDelt[it] = ((Phis[4]/Phis[3])-((1+A0[it][it])*delt[0]))/(1+A0[it][1]);
        delt[it+1] = delt[it] + detDelt[it];

        PiC[it] = delt[it]*Phis[3]*(1+A0[it][0]);
    }

    double Z = 1+A0[0][0];

    double Cp0ri[10];
    double j;
    double h;
    for(int i = 0; i < 9; i++){
        if(A4[i][8] != 0){
            j = pow(((A4[i][8]*Phis[7])/sinh(A4[i][8]*Phis[7])),2);
        }
        else{
            j = 0;
        }
        if(A4[i][6] != 0){
            h = pow(((A4[i][6]*Phis[7])/sinh(A4[i][6]*Phis[7])),2);
        }
        else{
            h = 0;
        }
        Cp0ri[i] = A4[i][0]+A4[i][1]*pow(((A4[i][2]*Phis[7])/sinh(A4[i][2]*Phis[7])),2)+A4[i][3]*pow(((A4[i][4]*Phis[7])/sinh(A4[i][4]*Phis[7])),2)+A4[i][5]*h+A4[i][7]*j;
    }
    Cp0ri[9] = 2.50;
    double Cp0r = 0; 
    for(int i = 0; i < 10; i++){
        Cp0r = Cp0r + (Cp0ri[i]*variant[i][1]);
    }
    double K = (1+A0[0][1]+pow(1+A0[0][2],2)/(Cp0r-1+A0[0][3]))/Z;

    std::cout <<"t = "<< Phis[3] << std::endl;
    std::cout <<"Pi = "<< Phis[4] << std::endl;
    std::cout <<"Lt = "<< Phis[5] << std::endl;
    std::cout <<"R = "<< Phis[6] << std::endl;
    std::cout <<"p0m = "<< p0m << std::endl;
    std::cout <<"Kx = "<< Kx << std::endl;
    std::cout <<"delt0 = "<< delt[0] << std::endl;
    std::cout <<"PiC = "<< PiC[0] << std::endl;
    std::cout <<"Z = "<< Z << std::endl;
    for(int i = 0; i < 10; i++){
        std::cout <<"Cp0ri = "<< Cp0ri[i] << std::endl;
    }
    std::cout <<"Cp0r = "<< Cp0r << std::endl;
    std::cout <<"K = "<< K << std::endl;
    




}